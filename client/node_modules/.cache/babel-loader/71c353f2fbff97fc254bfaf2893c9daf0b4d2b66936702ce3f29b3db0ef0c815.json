{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ajieh\\\\OneDrive\\\\Desktop\\\\ENSF 609_610\\\\Cisco_Project\\\\log-generator\\\\client\\\\src\\\\components\\\\Tracking.js\",\n  _s = $RefreshSig$();\nimport { Box, Button, Text, useBoolean, VStack } from '@chakra-ui/react';\nimport { React, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Tracking() {\n  _s();\n  const [isLoading, setIsLoading] = useBoolean(false);\n  const [isRunning, setRunning] = useBoolean(true); //temporary, for demo\n  const [uptime, setUptime] = useState(0);\n  const [logsCreated, setlogsCreated] = useState(0);\n\n  // update uptime if server running\n  useEffect(() => {\n    let interval;\n    if (isRunning) {\n      interval = setInterval(() => {\n        setUptime(prevTime => prevTime + 1);\n      }, 1000);\n    } else if (!isRunning) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isRunning]);\n\n  // converts seconds to a custom time string\n  const secondsToTimeString = totalSeconds => {\n    const hours = Math.floor(totalSeconds / 3600);\n    totalSeconds %= 3600;\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    let time = '';\n    if (Number(hours) > 0) {\n      time += hours + 'hr ';\n    }\n    if (Number(minutes) > 0) {\n      time += minutes + 'min ';\n    }\n    time += seconds + 'sec';\n    return time;\n  };\n\n  // handle cancel button\n  const handleCancel = () => {\n    setIsLoading.on();\n    console.log('cancel'); //temporary, for demo\n\n    setTimeout(() => {\n      setRunning.off();\n      setIsLoading.off(); //temporary, for demo\n    }, 500);\n  };\n  return /*#__PURE__*/_jsxDEV(VStack, {\n    spacing: \"0.5em\",\n    align: \"start\",\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      children: isRunning ? 'Running' : 'Standby'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: [\"Uptime: \", secondsToTimeString(uptime)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), \"logsCreated\", /*#__PURE__*/_jsxDEV(Text, {\n      children: [\"Logs created: \", logsCreated]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      pt: \"1em\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        colorScheme: \"red\",\n        onClick: handleCancel,\n        isLoading: isLoading,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(Tracking, \"VoETL8dsiSqQRdACcFskvbjfyhE=\", false, function () {\n  return [useBoolean, useBoolean];\n});\n_c = Tracking;\nexport default Tracking;\nvar _c;\n$RefreshReg$(_c, \"Tracking\");","map":{"version":3,"names":["Box","Button","Text","useBoolean","VStack","React","useEffect","useState","Tracking","isLoading","setIsLoading","isRunning","setRunning","uptime","setUptime","logsCreated","setlogsCreated","interval","setInterval","prevTime","clearInterval","secondsToTimeString","totalSeconds","hours","Math","floor","minutes","seconds","time","Number","handleCancel","on","console","log","setTimeout","off"],"sources":["C:/Users/ajieh/OneDrive/Desktop/ENSF 609_610/Cisco_Project/log-generator/client/src/components/Tracking.js"],"sourcesContent":["import { Box, Button, Text, useBoolean, VStack } from '@chakra-ui/react';\r\nimport { React, useEffect, useState } from 'react';\r\n\r\nfunction Tracking() {\r\n  const [isLoading, setIsLoading] = useBoolean(false);\r\n  const [isRunning, setRunning] = useBoolean(true); //temporary, for demo\r\n  const [uptime, setUptime] = useState(0);\r\n  const [logsCreated, setlogsCreated] = useState(0);\r\n\r\n  // update uptime if server running\r\n  useEffect(() => {\r\n    let interval;\r\n    if (isRunning) {\r\n      interval = setInterval(() => {\r\n        setUptime(prevTime => prevTime + 1);\r\n      }, 1000);\r\n    } else if (!isRunning) {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [isRunning]);\r\n\r\n  // converts seconds to a custom time string\r\n  const secondsToTimeString = totalSeconds => {\r\n    const hours = Math.floor(totalSeconds / 3600);\r\n    totalSeconds %= 3600;\r\n    const minutes = Math.floor(totalSeconds / 60);\r\n    const seconds = totalSeconds % 60;\r\n    let time = '';\r\n\r\n    if (Number(hours) > 0) {\r\n      time += hours + 'hr ';\r\n    }\r\n    if (Number(minutes) > 0) {\r\n      time += minutes + 'min ';\r\n    }\r\n    time += seconds + 'sec';\r\n\r\n    return time;\r\n  };\r\n\r\n  // handle cancel button\r\n  const handleCancel = () => {\r\n    setIsLoading.on();\r\n\r\n    console.log('cancel'); //temporary, for demo\r\n\r\n    setTimeout(() => {\r\n      setRunning.off();\r\n      setIsLoading.off(); //temporary, for demo\r\n    }, 500);\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"0.5em\" align=\"start\">\r\n      <Text>{isRunning ? 'Running' : 'Standby'}</Text>\r\n      <Text>Uptime: {secondsToTimeString(uptime)}</Text>logsCreated\r\n      <Text>Logs created: {logsCreated}</Text>\r\n      <Box pt=\"1em\">\r\n        <Button\r\n          type=\"submit\"\r\n          colorScheme=\"red\"\r\n          onClick={handleCancel}\r\n          isLoading={isLoading}\r\n        >\r\n          Cancel\r\n        </Button>\r\n      </Box>\r\n    </VStack>\r\n  );\r\n}\r\n\r\nexport default Tracking;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}