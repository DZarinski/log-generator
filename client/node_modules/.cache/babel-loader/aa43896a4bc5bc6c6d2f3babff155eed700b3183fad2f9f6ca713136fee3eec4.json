{"ast":null,"code":"import _slicedToArray from \"C:/Users/ajieh/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/ajieh/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ajieh/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { BYTE } from './byte';\nimport { FrameImpl } from './frame-impl';\nimport { Parser } from './parser';\nimport { StompSocketState } from './types';\nimport { Versions } from './versions';\nimport { augmentWebsocket } from './augment-websocket';\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport var StompHandler = /*#__PURE__*/function () {\n  function StompHandler(_client, _webSocket) {\n    var _this = this;\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, StompHandler);\n    this._client = _client;\n    this._webSocket = _webSocket;\n    this._serverFrameHandlers = {\n      // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n      CONNECTED: function CONNECTED(frame) {\n        _this.debug(\"connected to server \".concat(frame.headers.server));\n        _this._connected = true;\n        _this._connectedVersion = frame.headers.version;\n        // STOMP version 1.2 needs header values to be escaped\n        if (_this._connectedVersion === Versions.V1_2) {\n          _this._escapeHeaderValues = true;\n        }\n        _this._setupHeartbeat(frame.headers);\n        _this.onConnect(frame);\n      },\n      // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n      MESSAGE: function MESSAGE(frame) {\n        // the callback is registered when the client calls\n        // `subscribe()`.\n        // If there is no registered subscription for the received message,\n        // the default `onUnhandledMessage` callback is used that the client can set.\n        // This is useful for subscriptions that are automatically created\n        // on the browser side (e.g. [RabbitMQ's temporary\n        // queues](http://www.rabbitmq.com/stomp.html)).\n        var subscription = frame.headers.subscription;\n        var onReceive = _this._subscriptions[subscription] || _this.onUnhandledMessage;\n        // bless the frame to be a Message\n        var message = frame;\n        var client = _this;\n        var messageId = _this._connectedVersion === Versions.V1_2 ? message.headers.ack : message.headers['message-id'];\n        // add `ack()` and `nack()` methods directly to the returned frame\n        // so that a simple call to `message.ack()` can acknowledge the message.\n        message.ack = function () {\n          var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return client.ack(messageId, subscription, headers);\n        };\n        message.nack = function () {\n          var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return client.nack(messageId, subscription, headers);\n        };\n        onReceive(message);\n      },\n      // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n      RECEIPT: function RECEIPT(frame) {\n        var callback = _this._receiptWatchers[frame.headers['receipt-id']];\n        if (callback) {\n          callback(frame);\n          // Server will acknowledge only once, remove the callback\n          delete _this._receiptWatchers[frame.headers['receipt-id']];\n        } else {\n          _this.onUnhandledReceipt(frame);\n        }\n      },\n      // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n      ERROR: function ERROR(frame) {\n        _this.onStompError(frame);\n      }\n    };\n    // used to index subscribers\n    this._counter = 0;\n    // subscription callbacks indexed by subscriber's ID\n    this._subscriptions = {};\n    // receipt-watchers indexed by receipts-ids\n    this._receiptWatchers = {};\n    this._partialData = '';\n    this._escapeHeaderValues = false;\n    this._lastServerActivityTS = Date.now();\n    this.configure(config);\n  }\n  _createClass(StompHandler, [{\n    key: \"connectedVersion\",\n    get: function get() {\n      return this._connectedVersion;\n    }\n  }, {\n    key: \"connected\",\n    get: function get() {\n      return this._connected;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(conf) {\n      // bulk assign all properties to this\n      Object.assign(this, conf);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this2 = this;\n      var parser = new Parser(\n      // On Frame\n      function (rawFrame) {\n        var frame = FrameImpl.fromRawFrame(rawFrame, _this2._escapeHeaderValues);\n        // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n        if (!_this2.logRawCommunication) {\n          _this2.debug(\"<<< \".concat(frame));\n        }\n        var serverFrameHandler = _this2._serverFrameHandlers[frame.command] || _this2.onUnhandledFrame;\n        serverFrameHandler(frame);\n      },\n      // On Incoming Ping\n      function () {\n        _this2.debug('<<< PONG');\n      });\n      this._webSocket.onmessage = function (evt) {\n        _this2.debug('Received data');\n        _this2._lastServerActivityTS = Date.now();\n        if (_this2.logRawCommunication) {\n          var rawChunkAsString = evt.data instanceof ArrayBuffer ? new TextDecoder().decode(evt.data) : evt.data;\n          _this2.debug(\"<<< \".concat(rawChunkAsString));\n        }\n        parser.parseChunk(evt.data, _this2.appendMissingNULLonIncoming);\n      };\n      this._onclose = function (closeEvent) {\n        _this2.debug(\"Connection closed to \".concat(_this2._client.brokerURL));\n        _this2._cleanUp();\n        _this2.onWebSocketClose(closeEvent);\n      };\n      this._webSocket.onclose = this._onclose;\n      this._webSocket.onerror = function (errorEvent) {\n        _this2.onWebSocketError(errorEvent);\n      };\n      this._webSocket.onopen = function () {\n        // Clone before updating\n        var connectHeaders = Object.assign({}, _this2.connectHeaders);\n        _this2.debug('Web Socket Opened...');\n        connectHeaders['accept-version'] = _this2.stompVersions.supportedVersions();\n        connectHeaders['heart-beat'] = [_this2.heartbeatOutgoing, _this2.heartbeatIncoming].join(',');\n        _this2._transmit({\n          command: 'CONNECT',\n          headers: connectHeaders\n        });\n      };\n    }\n  }, {\n    key: \"_setupHeartbeat\",\n    value: function _setupHeartbeat(headers) {\n      var _this3 = this;\n      if (headers.version !== Versions.V1_1 && headers.version !== Versions.V1_2) {\n        return;\n      }\n      // It is valid for the server to not send this header\n      // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n      if (!headers['heart-beat']) {\n        return;\n      }\n      // heart-beat header received from the server looks like:\n      //\n      //     heart-beat: sx, sy\n      var _headers$heartBeat$s = headers['heart-beat'].split(',').map(function (v) {\n          return parseInt(v, 10);\n        }),\n        _headers$heartBeat$s2 = _slicedToArray(_headers$heartBeat$s, 2),\n        serverOutgoing = _headers$heartBeat$s2[0],\n        serverIncoming = _headers$heartBeat$s2[1];\n      if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n        var ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n        this.debug(\"send PING every \".concat(ttl, \"ms\"));\n        this._pinger = setInterval(function () {\n          if (_this3._webSocket.readyState === StompSocketState.OPEN) {\n            _this3._webSocket.send(BYTE.LF);\n            _this3.debug('>>> PING');\n          }\n        }, ttl);\n      }\n      if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n        var _ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n        this.debug(\"check PONG every \".concat(_ttl, \"ms\"));\n        this._ponger = setInterval(function () {\n          var delta = Date.now() - _this3._lastServerActivityTS;\n          // We wait twice the TTL to be flexible on window's setInterval calls\n          if (delta > _ttl * 2) {\n            _this3.debug(\"did not receive server activity for the last \".concat(delta, \"ms\"));\n            _this3._closeOrDiscardWebsocket();\n          }\n        }, _ttl);\n      }\n    }\n  }, {\n    key: \"_closeOrDiscardWebsocket\",\n    value: function _closeOrDiscardWebsocket() {\n      if (this.discardWebsocketOnCommFailure) {\n        this.debug('Discarding websocket, the underlying socket may linger for a while');\n        this._discardWebsocket();\n      } else {\n        this.debug('Issuing close on the websocket');\n        this._closeWebsocket();\n      }\n    }\n  }, {\n    key: \"forceDisconnect\",\n    value: function forceDisconnect() {\n      if (this._webSocket) {\n        if (this._webSocket.readyState === StompSocketState.CONNECTING || this._webSocket.readyState === StompSocketState.OPEN) {\n          this._closeOrDiscardWebsocket();\n        }\n      }\n    }\n  }, {\n    key: \"_closeWebsocket\",\n    value: function _closeWebsocket() {\n      this._webSocket.onmessage = function () {}; // ignore messages\n      this._webSocket.close();\n    }\n  }, {\n    key: \"_discardWebsocket\",\n    value: function _discardWebsocket() {\n      var _this4 = this;\n      if (!this._webSocket.terminate) {\n        augmentWebsocket(this._webSocket, function (msg) {\n          return _this4.debug(msg);\n        });\n      }\n      this._webSocket.terminate();\n    }\n  }, {\n    key: \"_transmit\",\n    value: function _transmit(params) {\n      var command = params.command,\n        headers = params.headers,\n        body = params.body,\n        binaryBody = params.binaryBody,\n        skipContentLengthHeader = params.skipContentLengthHeader;\n      var frame = new FrameImpl({\n        command: command,\n        headers: headers,\n        body: body,\n        binaryBody: binaryBody,\n        escapeHeaderValues: this._escapeHeaderValues,\n        skipContentLengthHeader: skipContentLengthHeader\n      });\n      var rawChunk = frame.serialize();\n      if (this.logRawCommunication) {\n        this.debug(\">>> \".concat(rawChunk));\n      } else {\n        this.debug(\">>> \".concat(frame));\n      }\n      if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n        rawChunk = new TextEncoder().encode(rawChunk);\n      }\n      if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n        this._webSocket.send(rawChunk);\n      } else {\n        var out = rawChunk;\n        while (out.length > 0) {\n          var chunk = out.substring(0, this.maxWebSocketChunkSize);\n          out = out.substring(this.maxWebSocketChunkSize);\n          this._webSocket.send(chunk);\n          this.debug(\"chunk sent = \".concat(chunk.length, \", remaining = \").concat(out.length));\n        }\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this5 = this;\n      if (this.connected) {\n        try {\n          // clone before updating\n          var disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n          if (!disconnectHeaders.receipt) {\n            disconnectHeaders.receipt = \"close-\".concat(this._counter++);\n          }\n          this.watchForReceipt(disconnectHeaders.receipt, function (frame) {\n            _this5._closeWebsocket();\n            _this5._cleanUp();\n            _this5.onDisconnect(frame);\n          });\n          this._transmit({\n            command: 'DISCONNECT',\n            headers: disconnectHeaders\n          });\n        } catch (error) {\n          this.debug(\"Ignoring error during disconnect \".concat(error));\n        }\n      } else {\n        if (this._webSocket.readyState === StompSocketState.CONNECTING || this._webSocket.readyState === StompSocketState.OPEN) {\n          this._closeWebsocket();\n        }\n      }\n    }\n  }, {\n    key: \"_cleanUp\",\n    value: function _cleanUp() {\n      this._connected = false;\n      if (this._pinger) {\n        clearInterval(this._pinger);\n      }\n      if (this._ponger) {\n        clearInterval(this._ponger);\n      }\n    }\n  }, {\n    key: \"publish\",\n    value: function publish(params) {\n      var destination = params.destination,\n        headers = params.headers,\n        body = params.body,\n        binaryBody = params.binaryBody,\n        skipContentLengthHeader = params.skipContentLengthHeader;\n      var hdrs = Object.assign({\n        destination: destination\n      }, headers);\n      this._transmit({\n        command: 'SEND',\n        headers: hdrs,\n        body: body,\n        binaryBody: binaryBody,\n        skipContentLengthHeader: skipContentLengthHeader\n      });\n    }\n  }, {\n    key: \"watchForReceipt\",\n    value: function watchForReceipt(receiptId, callback) {\n      this._receiptWatchers[receiptId] = callback;\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(destination, callback) {\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      headers = Object.assign({}, headers);\n      if (!headers.id) {\n        headers.id = \"sub-\".concat(this._counter++);\n      }\n      headers.destination = destination;\n      this._subscriptions[headers.id] = callback;\n      this._transmit({\n        command: 'SUBSCRIBE',\n        headers: headers\n      });\n      var client = this;\n      return {\n        id: headers.id,\n        unsubscribe: function unsubscribe(hdrs) {\n          return client.unsubscribe(headers.id, hdrs);\n        }\n      };\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(id) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      headers = Object.assign({}, headers);\n      delete this._subscriptions[id];\n      headers.id = id;\n      this._transmit({\n        command: 'UNSUBSCRIBE',\n        headers: headers\n      });\n    }\n  }, {\n    key: \"begin\",\n    value: function begin(transactionId) {\n      var txId = transactionId || \"tx-\".concat(this._counter++);\n      this._transmit({\n        command: 'BEGIN',\n        headers: {\n          transaction: txId\n        }\n      });\n      var client = this;\n      return {\n        id: txId,\n        commit: function commit() {\n          client.commit(txId);\n        },\n        abort: function abort() {\n          client.abort(txId);\n        }\n      };\n    }\n  }, {\n    key: \"commit\",\n    value: function commit(transactionId) {\n      this._transmit({\n        command: 'COMMIT',\n        headers: {\n          transaction: transactionId\n        }\n      });\n    }\n  }, {\n    key: \"abort\",\n    value: function abort(transactionId) {\n      this._transmit({\n        command: 'ABORT',\n        headers: {\n          transaction: transactionId\n        }\n      });\n    }\n  }, {\n    key: \"ack\",\n    value: function ack(messageId, subscriptionId) {\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      headers = Object.assign({}, headers);\n      if (this._connectedVersion === Versions.V1_2) {\n        headers.id = messageId;\n      } else {\n        headers['message-id'] = messageId;\n      }\n      headers.subscription = subscriptionId;\n      this._transmit({\n        command: 'ACK',\n        headers: headers\n      });\n    }\n  }, {\n    key: \"nack\",\n    value: function nack(messageId, subscriptionId) {\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      headers = Object.assign({}, headers);\n      if (this._connectedVersion === Versions.V1_2) {\n        headers.id = messageId;\n      } else {\n        headers['message-id'] = messageId;\n      }\n      headers.subscription = subscriptionId;\n      return this._transmit({\n        command: 'NACK',\n        headers: headers\n      });\n    }\n  }]);\n  return StompHandler;\n}();","map":{"version":3,"mappings":"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","names":["BYTE","FrameImpl","Parser","StompSocketState","Versions","augmentWebsocket","StompHandler","_client","_webSocket","config","CONNECTED","debug","frame","headers","server","_connected","_connectedVersion","version","V1_2","_escapeHeaderValues","_setupHeartbeat","onConnect","MESSAGE","subscription","onReceive","_subscriptions","onUnhandledMessage","message","client","messageId","ack","nack","RECEIPT","callback","_receiptWatchers","onUnhandledReceipt","ERROR","onStompError","_counter","_partialData","_lastServerActivityTS","Date","now","configure","conf","Object","assign","parser","fromRawFrame","rawFrame","logRawCommunication","serverFrameHandler","_serverFrameHandlers","command","onUnhandledFrame","onmessage","evt","rawChunkAsString","data","ArrayBuffer","TextDecoder","decode","parseChunk","appendMissingNULLonIncoming","_onclose","closeEvent","brokerURL","_cleanUp","onWebSocketClose","onclose","onerror","errorEvent","onWebSocketError","onopen","connectHeaders","stompVersions","supportedVersions","heartbeatOutgoing","heartbeatIncoming","join","_transmit","V1_1","split","map","v","parseInt","serverOutgoing","serverIncoming","ttl","Math","max","_pinger","setInterval","readyState","OPEN","send","LF","_ponger","delta","_closeOrDiscardWebsocket","discardWebsocketOnCommFailure","_discardWebsocket","_closeWebsocket","CONNECTING","close","terminate","msg","params","body","binaryBody","skipContentLengthHeader","escapeHeaderValues","rawChunk","serialize","forceBinaryWSFrames","TextEncoder","encode","splitLargeFrames","out","length","chunk","substring","maxWebSocketChunkSize","connected","disconnectHeaders","receipt","watchForReceipt","onDisconnect","error","clearInterval","destination","hdrs","receiptId","id","unsubscribe","transactionId","txId","transaction","commit","abort","subscriptionId"],"sources":["C:\\Users\\ajieh\\OneDrive\\Desktop\\ENSF 609_610\\Cisco_Project\\log-generator\\client\\node_modules\\@stomp\\stompjs\\src\\stomp-handler.ts"],"sourcesContent":["import { BYTE } from './byte';\nimport { Client } from './client';\nimport { FrameImpl } from './frame-impl';\nimport { IMessage } from './i-message';\nimport { ITransaction } from './i-transaction';\nimport { Parser } from './parser';\nimport { StompConfig } from './stomp-config';\nimport { StompHeaders } from './stomp-headers';\nimport { StompSubscription } from './stomp-subscription';\nimport {\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  IPublishParams,\n  IStompSocket,\n  IStompSocketMessageEvent,\n  messageCallbackType,\n  StompSocketState,\n  wsErrorCallbackType,\n} from './types';\nimport { Versions } from './versions';\nimport { augmentWebsocket } from './augment-websocket';\n\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n  public debug: debugFnType;\n\n  public stompVersions: Versions;\n\n  public connectHeaders: StompHeaders;\n\n  public disconnectHeaders: StompHeaders;\n\n  public heartbeatIncoming: number;\n\n  public heartbeatOutgoing: number;\n\n  public onUnhandledMessage: messageCallbackType;\n\n  public onUnhandledReceipt: frameCallbackType;\n\n  public onUnhandledFrame: frameCallbackType;\n\n  public onConnect: frameCallbackType;\n\n  public onDisconnect: frameCallbackType;\n\n  public onStompError: frameCallbackType;\n\n  public onWebSocketClose: closeEventCallbackType;\n\n  public onWebSocketError: wsErrorCallbackType;\n\n  public logRawCommunication: boolean;\n\n  public splitLargeFrames: boolean;\n\n  public maxWebSocketChunkSize: number;\n\n  public forceBinaryWSFrames: boolean;\n\n  public appendMissingNULLonIncoming: boolean;\n\n  public discardWebsocketOnCommFailure: boolean;\n\n  get connectedVersion(): string {\n    return this._connectedVersion;\n  }\n  private _connectedVersion: string;\n\n  get connected(): boolean {\n    return this._connected;\n  }\n\n  private _connected: boolean;\n\n  private readonly _subscriptions: { [key: string]: messageCallbackType };\n  private readonly _receiptWatchers: { [key: string]: frameCallbackType };\n  private _partialData: string;\n  private _escapeHeaderValues: boolean;\n  private _counter: number;\n  private _pinger: any;\n  private _ponger: any;\n  private _lastServerActivityTS: number;\n\n  private _onclose: (closeEvent: any) => void;\n\n  constructor(\n    private _client: Client,\n    public _webSocket: IStompSocket,\n    config: StompConfig = {}\n  ) {\n    // used to index subscribers\n    this._counter = 0;\n\n    // subscription callbacks indexed by subscriber's ID\n    this._subscriptions = {};\n\n    // receipt-watchers indexed by receipts-ids\n    this._receiptWatchers = {};\n\n    this._partialData = '';\n\n    this._escapeHeaderValues = false;\n\n    this._lastServerActivityTS = Date.now();\n\n    this.configure(config);\n  }\n\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (Object as any).assign(this, conf);\n  }\n\n  public start(): void {\n    const parser = new Parser(\n      // On Frame\n      rawFrame => {\n        const frame = FrameImpl.fromRawFrame(\n          rawFrame,\n          this._escapeHeaderValues\n        );\n\n        // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n        if (!this.logRawCommunication) {\n          this.debug(`<<< ${frame}`);\n        }\n\n        const serverFrameHandler =\n          this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n        serverFrameHandler(frame);\n      },\n      // On Incoming Ping\n      () => {\n        this.debug('<<< PONG');\n      }\n    );\n\n    this._webSocket.onmessage = (evt: IStompSocketMessageEvent) => {\n      this.debug('Received data');\n      this._lastServerActivityTS = Date.now();\n\n      if (this.logRawCommunication) {\n        const rawChunkAsString =\n          evt.data instanceof ArrayBuffer\n            ? new TextDecoder().decode(evt.data)\n            : evt.data;\n        this.debug(`<<< ${rawChunkAsString}`);\n      }\n\n      parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n    };\n\n    this._onclose = (closeEvent): void => {\n      this.debug(`Connection closed to ${this._client.brokerURL}`);\n      this._cleanUp();\n      this.onWebSocketClose(closeEvent);\n    };\n\n    this._webSocket.onclose = this._onclose;\n\n    this._webSocket.onerror = (errorEvent): void => {\n      this.onWebSocketError(errorEvent);\n    };\n\n    this._webSocket.onopen = () => {\n      // Clone before updating\n      const connectHeaders = (Object as any).assign({}, this.connectHeaders);\n\n      this.debug('Web Socket Opened...');\n      connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n      connectHeaders['heart-beat'] = [\n        this.heartbeatOutgoing,\n        this.heartbeatIncoming,\n      ].join(',');\n      this._transmit({ command: 'CONNECT', headers: connectHeaders });\n    };\n  }\n\n  private readonly _serverFrameHandlers: {\n    [key: string]: frameCallbackType;\n  } = {\n    // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n    CONNECTED: frame => {\n      this.debug(`connected to server ${frame.headers.server}`);\n      this._connected = true;\n      this._connectedVersion = frame.headers.version;\n      // STOMP version 1.2 needs header values to be escaped\n      if (this._connectedVersion === Versions.V1_2) {\n        this._escapeHeaderValues = true;\n      }\n\n      this._setupHeartbeat(frame.headers);\n      this.onConnect(frame);\n    },\n\n    // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n    MESSAGE: frame => {\n      // the callback is registered when the client calls\n      // `subscribe()`.\n      // If there is no registered subscription for the received message,\n      // the default `onUnhandledMessage` callback is used that the client can set.\n      // This is useful for subscriptions that are automatically created\n      // on the browser side (e.g. [RabbitMQ's temporary\n      // queues](http://www.rabbitmq.com/stomp.html)).\n      const subscription = frame.headers.subscription;\n      const onReceive =\n        this._subscriptions[subscription] || this.onUnhandledMessage;\n\n      // bless the frame to be a Message\n      const message = frame as IMessage;\n\n      const client = this;\n      const messageId =\n        this._connectedVersion === Versions.V1_2\n          ? message.headers.ack\n          : message.headers['message-id'];\n\n      // add `ack()` and `nack()` methods directly to the returned frame\n      // so that a simple call to `message.ack()` can acknowledge the message.\n      message.ack = (headers: StompHeaders = {}): void => {\n        return client.ack(messageId, subscription, headers);\n      };\n      message.nack = (headers: StompHeaders = {}): void => {\n        return client.nack(messageId, subscription, headers);\n      };\n      onReceive(message);\n    },\n\n    // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n    RECEIPT: frame => {\n      const callback = this._receiptWatchers[frame.headers['receipt-id']];\n      if (callback) {\n        callback(frame);\n        // Server will acknowledge only once, remove the callback\n        delete this._receiptWatchers[frame.headers['receipt-id']];\n      } else {\n        this.onUnhandledReceipt(frame);\n      }\n    },\n\n    // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n    ERROR: frame => {\n      this.onStompError(frame);\n    },\n  };\n\n  private _setupHeartbeat(headers: StompHeaders): void {\n    if (\n      headers.version !== Versions.V1_1 &&\n      headers.version !== Versions.V1_2\n    ) {\n      return;\n    }\n\n    // It is valid for the server to not send this header\n    // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n    if (!headers['heart-beat']) {\n      return;\n    }\n\n    // heart-beat header received from the server looks like:\n    //\n    //     heart-beat: sx, sy\n    const [serverOutgoing, serverIncoming] = headers['heart-beat']\n      .split(',')\n      .map((v: string) => parseInt(v, 10));\n\n    if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n      const ttl: number = Math.max(this.heartbeatOutgoing, serverIncoming);\n      this.debug(`send PING every ${ttl}ms`);\n      this._pinger = setInterval(() => {\n        if (this._webSocket.readyState === StompSocketState.OPEN) {\n          this._webSocket.send(BYTE.LF);\n          this.debug('>>> PING');\n        }\n      }, ttl);\n    }\n\n    if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n      const ttl: number = Math.max(this.heartbeatIncoming, serverOutgoing);\n      this.debug(`check PONG every ${ttl}ms`);\n      this._ponger = setInterval(() => {\n        const delta = Date.now() - this._lastServerActivityTS;\n        // We wait twice the TTL to be flexible on window's setInterval calls\n        if (delta > ttl * 2) {\n          this.debug(`did not receive server activity for the last ${delta}ms`);\n          this._closeOrDiscardWebsocket();\n        }\n      }, ttl);\n    }\n  }\n\n  private _closeOrDiscardWebsocket() {\n    if (this.discardWebsocketOnCommFailure) {\n      this.debug(\n        'Discarding websocket, the underlying socket may linger for a while'\n      );\n      this._discardWebsocket();\n    } else {\n      this.debug('Issuing close on the websocket');\n      this._closeWebsocket();\n    }\n  }\n\n  public forceDisconnect() {\n    if (this._webSocket) {\n      if (\n        this._webSocket.readyState === StompSocketState.CONNECTING ||\n        this._webSocket.readyState === StompSocketState.OPEN\n      ) {\n        this._closeOrDiscardWebsocket();\n      }\n    }\n  }\n\n  public _closeWebsocket() {\n    this._webSocket.onmessage = () => {}; // ignore messages\n    this._webSocket.close();\n  }\n\n  private _discardWebsocket() {\n    if (!this._webSocket.terminate) {\n      augmentWebsocket(this._webSocket, (msg: string) => this.debug(msg));\n    }\n\n    this._webSocket.terminate();\n  }\n\n  private _transmit(params: {\n    command: string;\n    headers?: StompHeaders;\n    body?: string;\n    binaryBody?: Uint8Array;\n    skipContentLengthHeader?: boolean;\n  }): void {\n    const { command, headers, body, binaryBody, skipContentLengthHeader } =\n      params;\n    const frame = new FrameImpl({\n      command,\n      headers,\n      body,\n      binaryBody,\n      escapeHeaderValues: this._escapeHeaderValues,\n      skipContentLengthHeader,\n    });\n\n    let rawChunk = frame.serialize();\n\n    if (this.logRawCommunication) {\n      this.debug(`>>> ${rawChunk}`);\n    } else {\n      this.debug(`>>> ${frame}`);\n    }\n\n    if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n      rawChunk = new TextEncoder().encode(rawChunk);\n    }\n\n    if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n      this._webSocket.send(rawChunk);\n    } else {\n      let out = rawChunk as string;\n      while (out.length > 0) {\n        const chunk = out.substring(0, this.maxWebSocketChunkSize);\n        out = out.substring(this.maxWebSocketChunkSize);\n        this._webSocket.send(chunk);\n        this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n      }\n    }\n  }\n\n  public dispose(): void {\n    if (this.connected) {\n      try {\n        // clone before updating\n        const disconnectHeaders = (Object as any).assign(\n          {},\n          this.disconnectHeaders\n        );\n\n        if (!disconnectHeaders.receipt) {\n          disconnectHeaders.receipt = `close-${this._counter++}`;\n        }\n        this.watchForReceipt(disconnectHeaders.receipt, frame => {\n          this._closeWebsocket();\n          this._cleanUp();\n          this.onDisconnect(frame);\n        });\n        this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n      } catch (error) {\n        this.debug(`Ignoring error during disconnect ${error}`);\n      }\n    } else {\n      if (\n        this._webSocket.readyState === StompSocketState.CONNECTING ||\n        this._webSocket.readyState === StompSocketState.OPEN\n      ) {\n        this._closeWebsocket();\n      }\n    }\n  }\n\n  private _cleanUp() {\n    this._connected = false;\n\n    if (this._pinger) {\n      clearInterval(this._pinger);\n    }\n    if (this._ponger) {\n      clearInterval(this._ponger);\n    }\n  }\n\n  public publish(params: IPublishParams): void {\n    const { destination, headers, body, binaryBody, skipContentLengthHeader } =\n      params;\n    const hdrs: StompHeaders = (Object as any).assign({ destination }, headers);\n    this._transmit({\n      command: 'SEND',\n      headers: hdrs,\n      body,\n      binaryBody,\n      skipContentLengthHeader,\n    });\n  }\n\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\n    this._receiptWatchers[receiptId] = callback;\n  }\n\n  public subscribe(\n    destination: string,\n    callback: messageCallbackType,\n    headers: StompHeaders = {}\n  ): StompSubscription {\n    headers = (Object as any).assign({}, headers);\n\n    if (!headers.id) {\n      headers.id = `sub-${this._counter++}`;\n    }\n    headers.destination = destination;\n    this._subscriptions[headers.id] = callback;\n    this._transmit({ command: 'SUBSCRIBE', headers });\n    const client = this;\n    return {\n      id: headers.id,\n\n      unsubscribe(hdrs) {\n        return client.unsubscribe(headers.id, hdrs);\n      },\n    };\n  }\n\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    headers = (Object as any).assign({}, headers);\n\n    delete this._subscriptions[id];\n    headers.id = id;\n    this._transmit({ command: 'UNSUBSCRIBE', headers });\n  }\n\n  public begin(transactionId: string): ITransaction {\n    const txId = transactionId || `tx-${this._counter++}`;\n    this._transmit({\n      command: 'BEGIN',\n      headers: {\n        transaction: txId,\n      },\n    });\n    const client = this;\n    return {\n      id: txId,\n      commit(): void {\n        client.commit(txId);\n      },\n      abort(): void {\n        client.abort(txId);\n      },\n    };\n  }\n\n  public commit(transactionId: string): void {\n    this._transmit({\n      command: 'COMMIT',\n      headers: {\n        transaction: transactionId,\n      },\n    });\n  }\n\n  public abort(transactionId: string): void {\n    this._transmit({\n      command: 'ABORT',\n      headers: {\n        transaction: transactionId,\n      },\n    });\n  }\n\n  public ack(\n    messageId: string,\n    subscriptionId: string,\n    headers: StompHeaders = {}\n  ): void {\n    headers = (Object as any).assign({}, headers);\n\n    if (this._connectedVersion === Versions.V1_2) {\n      headers.id = messageId;\n    } else {\n      headers['message-id'] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    this._transmit({ command: 'ACK', headers });\n  }\n\n  public nack(\n    messageId: string,\n    subscriptionId: string,\n    headers: StompHeaders = {}\n  ): void {\n    headers = (Object as any).assign({}, headers);\n\n    if (this._connectedVersion === Versions.V1_2) {\n      headers.id = messageId;\n    } else {\n      headers['message-id'] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    return this._transmit({ command: 'NACK', headers });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}