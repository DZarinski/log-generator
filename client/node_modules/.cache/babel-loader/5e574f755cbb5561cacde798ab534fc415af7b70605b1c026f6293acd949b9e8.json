{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/ajieh/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/ajieh/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ajieh/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { BYTE } from './byte';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nexport var FrameImpl = /*#__PURE__*/function () {\n  /**\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\n   *\n   * @internal\n   */\n  function FrameImpl(params) {\n    _classCallCheck(this, FrameImpl);\n    var command = params.command,\n      headers = params.headers,\n      body = params.body,\n      binaryBody = params.binaryBody,\n      escapeHeaderValues = params.escapeHeaderValues,\n      skipContentLengthHeader = params.skipContentLengthHeader;\n    this.command = command;\n    this.headers = Object.assign({}, headers || {});\n    if (binaryBody) {\n      this._binaryBody = binaryBody;\n      this.isBinaryBody = true;\n    } else {\n      this._body = body || '';\n      this.isBinaryBody = false;\n    }\n    this.escapeHeaderValues = escapeHeaderValues || false;\n    this.skipContentLengthHeader = skipContentLengthHeader || false;\n  }\n  /**\n   * body of the frame\n   */\n  _createClass(FrameImpl, [{\n    key: \"body\",\n    get: function get() {\n      if (!this._body && this.isBinaryBody) {\n        this._body = new TextDecoder().decode(this._binaryBody);\n      }\n      return this._body;\n    }\n    /**\n     * body as Uint8Array\n     */\n  }, {\n    key: \"binaryBody\",\n    get: function get() {\n      if (!this._binaryBody && !this.isBinaryBody) {\n        this._binaryBody = new TextEncoder().encode(this._body);\n      }\n      return this._binaryBody;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n  }, {\n    key: \"toString\",\n    value:\n    /**\n     * @internal\n     */\n    function toString() {\n      return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var cmdAndHeaders = this.serializeCmdAndHeaders();\n      if (this.isBinaryBody) {\n        return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n      } else {\n        return cmdAndHeaders + this._body + BYTE.NULL;\n      }\n    }\n  }, {\n    key: \"serializeCmdAndHeaders\",\n    value: function serializeCmdAndHeaders() {\n      var lines = [this.command];\n      if (this.skipContentLengthHeader) {\n        delete this.headers['content-length'];\n      }\n      for (var _i = 0, _Object$keys = Object.keys(this.headers || {}); _i < _Object$keys.length; _i++) {\n        var name = _Object$keys[_i];\n        var value = this.headers[name];\n        if (this.escapeHeaderValues && this.command !== 'CONNECT' && this.command !== 'CONNECTED') {\n          lines.push(\"\".concat(name, \":\").concat(FrameImpl.hdrValueEscape(\"\".concat(value))));\n        } else {\n          lines.push(\"\".concat(name, \":\").concat(value));\n        }\n      }\n      if (this.isBinaryBody || !this.isBodyEmpty() && !this.skipContentLengthHeader) {\n        lines.push(\"content-length:\".concat(this.bodyLength()));\n      }\n      return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n    }\n  }, {\n    key: \"isBodyEmpty\",\n    value: function isBodyEmpty() {\n      return this.bodyLength() === 0;\n    }\n  }, {\n    key: \"bodyLength\",\n    value: function bodyLength() {\n      var binaryBody = this.binaryBody;\n      return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n  }], [{\n    key: \"fromRawFrame\",\n    value: function fromRawFrame(rawFrame, escapeHeaderValues) {\n      var headers = {};\n      var trim = function trim(str) {\n        return str.replace(/^\\s+|\\s+$/g, '');\n      };\n      // In case of repeated headers, as per standards, first value need to be used\n      var _iterator = _createForOfIteratorHelper(rawFrame.headers.reverse()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var header = _step.value;\n          var idx = header.indexOf(':');\n          var key = trim(header[0]);\n          var value = trim(header[1]);\n          if (escapeHeaderValues && rawFrame.command !== 'CONNECT' && rawFrame.command !== 'CONNECTED') {\n            value = FrameImpl.hdrValueUnEscape(value);\n          }\n          headers[key] = value;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return new FrameImpl({\n        command: rawFrame.command,\n        headers: headers,\n        binaryBody: rawFrame.binaryBody,\n        escapeHeaderValues: escapeHeaderValues\n      });\n    }\n  }, {\n    key: \"sizeOfUTF8\",\n    value: function sizeOfUTF8(s) {\n      return s ? new TextEncoder().encode(s).length : 0;\n    }\n  }, {\n    key: \"toUnit8Array\",\n    value: function toUnit8Array(cmdAndHeaders, binaryBody) {\n      var uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n      var nullTerminator = new Uint8Array([0]);\n      var uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n      uint8Frame.set(uint8CmdAndHeaders);\n      uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n      uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n      return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n  }, {\n    key: \"marshall\",\n    value: function marshall(params) {\n      var frame = new FrameImpl(params);\n      return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n  }, {\n    key: \"hdrValueEscape\",\n    value: function hdrValueEscape(str) {\n      return str.replace(/\\\\/g, '\\\\\\\\').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n  }, {\n    key: \"hdrValueUnEscape\",\n    value: function hdrValueUnEscape(str) {\n      return str.replace(/\\\\r/g, '\\r').replace(/\\\\n/g, '\\n').replace(/\\\\c/g, ':').replace(/\\\\\\\\/g, '\\\\');\n    }\n  }]);\n  return FrameImpl;\n}();","map":{"version":3,"mappings":"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","names":["BYTE","FrameImpl","params","command","headers","body","binaryBody","escapeHeaderValues","skipContentLengthHeader","Object","assign","_binaryBody","isBinaryBody","_body","TextDecoder","decode","TextEncoder","encode","serializeCmdAndHeaders","cmdAndHeaders","toUnit8Array","buffer","NULL","lines","keys","name","value","push","hdrValueEscape","isBodyEmpty","bodyLength","join","LF","length","rawFrame","trim","str","replace","reverse","header","idx","indexOf","key","hdrValueUnEscape","s","uint8CmdAndHeaders","nullTerminator","Uint8Array","uint8Frame","set","frame","serialize"],"sources":["C:\\Users\\ajieh\\OneDrive\\Desktop\\ENSF 609_610\\Cisco_Project\\log-generator\\client\\node_modules\\@stomp\\stompjs\\src\\frame-impl.ts"],"sourcesContent":["import { BYTE } from './byte';\nimport { IFrame } from './i-frame';\nimport { StompHeaders } from './stomp-headers';\nimport { IRawFrameType } from './types';\n\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nexport class FrameImpl implements IFrame {\n  /**\n   * STOMP Command\n   */\n  public command: string;\n\n  /**\n   * Headers, key value pairs.\n   */\n  public headers: StompHeaders;\n\n  /**\n   * Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n   */\n  public isBinaryBody: boolean;\n\n  /**\n   * body of the frame\n   */\n  get body(): string {\n    if (!this._body && this.isBinaryBody) {\n      this._body = new TextDecoder().decode(this._binaryBody);\n    }\n    return this._body;\n  }\n  private _body: string;\n\n  /**\n   * body as Uint8Array\n   */\n  get binaryBody(): Uint8Array {\n    if (!this._binaryBody && !this.isBinaryBody) {\n      this._binaryBody = new TextEncoder().encode(this._body);\n    }\n    return this._binaryBody;\n  }\n  private _binaryBody: Uint8Array;\n\n  private escapeHeaderValues: boolean;\n  private skipContentLengthHeader: boolean;\n\n  /**\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\n   *\n   * @internal\n   */\n  constructor(params: {\n    command: string;\n    headers?: StompHeaders;\n    body?: string;\n    binaryBody?: Uint8Array;\n    escapeHeaderValues?: boolean;\n    skipContentLengthHeader?: boolean;\n  }) {\n    const {\n      command,\n      headers,\n      body,\n      binaryBody,\n      escapeHeaderValues,\n      skipContentLengthHeader,\n    } = params;\n    this.command = command;\n    this.headers = (Object as any).assign({}, headers || {});\n\n    if (binaryBody) {\n      this._binaryBody = binaryBody;\n      this.isBinaryBody = true;\n    } else {\n      this._body = body || '';\n      this.isBinaryBody = false;\n    }\n    this.escapeHeaderValues = escapeHeaderValues || false;\n    this.skipContentLengthHeader = skipContentLengthHeader || false;\n  }\n\n  /**\n   * deserialize a STOMP Frame from raw data.\n   *\n   * @internal\n   */\n  public static fromRawFrame(\n    rawFrame: IRawFrameType,\n    escapeHeaderValues: boolean\n  ): FrameImpl {\n    const headers: StompHeaders = {};\n    const trim = (str: string): string => str.replace(/^\\s+|\\s+$/g, '');\n\n    // In case of repeated headers, as per standards, first value need to be used\n    for (const header of rawFrame.headers.reverse()) {\n      const idx = header.indexOf(':');\n\n      const key = trim(header[0]);\n      let value = trim(header[1]);\n\n      if (\n        escapeHeaderValues &&\n        rawFrame.command !== 'CONNECT' &&\n        rawFrame.command !== 'CONNECTED'\n      ) {\n        value = FrameImpl.hdrValueUnEscape(value);\n      }\n\n      headers[key] = value;\n    }\n\n    return new FrameImpl({\n      command: rawFrame.command,\n      headers,\n      binaryBody: rawFrame.binaryBody,\n      escapeHeaderValues,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  public toString(): string {\n    return this.serializeCmdAndHeaders();\n  }\n\n  /**\n   * serialize this Frame in a format suitable to be passed to WebSocket.\n   * If the body is string the output will be string.\n   * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n   *\n   * @internal\n   */\n  public serialize(): string | ArrayBuffer {\n    const cmdAndHeaders = this.serializeCmdAndHeaders();\n\n    if (this.isBinaryBody) {\n      return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n    } else {\n      return cmdAndHeaders + this._body + BYTE.NULL;\n    }\n  }\n\n  private serializeCmdAndHeaders(): string {\n    const lines = [this.command];\n    if (this.skipContentLengthHeader) {\n      delete this.headers['content-length'];\n    }\n\n    for (const name of Object.keys(this.headers || {})) {\n      const value = this.headers[name];\n      if (\n        this.escapeHeaderValues &&\n        this.command !== 'CONNECT' &&\n        this.command !== 'CONNECTED'\n      ) {\n        lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n      } else {\n        lines.push(`${name}:${value}`);\n      }\n    }\n    if (\n      this.isBinaryBody ||\n      (!this.isBodyEmpty() && !this.skipContentLengthHeader)\n    ) {\n      lines.push(`content-length:${this.bodyLength()}`);\n    }\n    return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n  }\n\n  private isBodyEmpty(): boolean {\n    return this.bodyLength() === 0;\n  }\n\n  private bodyLength(): number {\n    const binaryBody = this.binaryBody;\n    return binaryBody ? binaryBody.length : 0;\n  }\n\n  /**\n   * Compute the size of a UTF-8 string by counting its number of bytes\n   * (and not the number of characters composing the string)\n   */\n  private static sizeOfUTF8(s: string): number {\n    return s ? new TextEncoder().encode(s).length : 0;\n  }\n\n  private static toUnit8Array(\n    cmdAndHeaders: string,\n    binaryBody: Uint8Array\n  ): Uint8Array {\n    const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n    const nullTerminator = new Uint8Array([0]);\n    const uint8Frame = new Uint8Array(\n      uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length\n    );\n\n    uint8Frame.set(uint8CmdAndHeaders);\n    uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n    uint8Frame.set(\n      nullTerminator,\n      uint8CmdAndHeaders.length + binaryBody.length\n    );\n\n    return uint8Frame;\n  }\n  /**\n   * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n   *\n   * @internal\n   */\n  public static marshall(params: {\n    command: string;\n    headers?: StompHeaders;\n    body?: string;\n    binaryBody?: Uint8Array;\n    escapeHeaderValues?: boolean;\n    skipContentLengthHeader?: boolean;\n  }) {\n    const frame = new FrameImpl(params);\n    return frame.serialize();\n  }\n\n  /**\n   *  Escape header values\n   */\n  private static hdrValueEscape(str: string): string {\n    return str\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/:/g, '\\\\c');\n  }\n\n  /**\n   * UnEscape header values\n   */\n  private static hdrValueUnEscape(str: string): string {\n    return str\n      .replace(/\\\\r/g, '\\r')\n      .replace(/\\\\n/g, '\\n')\n      .replace(/\\\\c/g, ':')\n      .replace(/\\\\\\\\/g, '\\\\');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}